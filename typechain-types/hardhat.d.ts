/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Arebmeme",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Arebmeme__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IHenloDexRouterV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHenloDexRouterV1__factory>;
    getContractFactory(
      name: "IHoneyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHoneyManager__factory>;
    getContractFactory(
      name: "HoneyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HoneyManager__factory>;
    getContractFactory(
      name: "IBeraCrocMultiSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeraCrocMultiSwap__factory>;
    getContractFactory(
      name: "IBGT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBGT__factory>;
    getContractFactory(
      name: "ICrocSwapDex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrocSwapDex__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IHenloDexRouterV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHenloDexRouterV1__factory>;
    getContractFactory(
      name: "IStakingVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingVault__factory>;
    getContractFactory(
      name: "IInterest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterest__factory>;
    getContractFactory(
      name: "InterestManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestManager__factory>;
    getContractFactory(
      name: "Isxr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Isxr__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "IBeraCrocMultiSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeraCrocMultiSwap__factory>;
    getContractFactory(
      name: "IBGT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBGT__factory>;
    getContractFactory(
      name: "ICrocSwapDex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrocSwapDex__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IHenloDexRouterV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHenloDexRouterV1__factory>;
    getContractFactory(
      name: "IStakingVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingVault__factory>;
    getContractFactory(
      name: "Malebi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Malebi__factory>;
    getContractFactory(
      name: "Calc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Calc__factory>;
    getContractFactory(
      name: "IPT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPT__factory>;
    getContractFactory(
      name: "IYT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYT__factory>;
    getContractFactory(
      name: "Pendle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pendle__factory>;
    getContractFactory(
      name: "PT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PT__factory>;
    getContractFactory(
      name: "YT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YT__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "Speech",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Speech__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SpeechLock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpeechLock__factory>;
    getContractFactory(
      name: "Sxr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sxr__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "XoxManage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XoxManage__factory>;
    getContractFactory(
      name: "Xyyz",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Xyyz__factory>;

    getContractAt(
      name: "Arebmeme",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Arebmeme>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IHenloDexRouterV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHenloDexRouterV1>;
    getContractAt(
      name: "IHoneyManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHoneyManager>;
    getContractAt(
      name: "HoneyManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HoneyManager>;
    getContractAt(
      name: "IBeraCrocMultiSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeraCrocMultiSwap>;
    getContractAt(
      name: "IBGT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBGT>;
    getContractAt(
      name: "ICrocSwapDex",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrocSwapDex>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IHenloDexRouterV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHenloDexRouterV1>;
    getContractAt(
      name: "IStakingVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingVault>;
    getContractAt(
      name: "IInterest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterest>;
    getContractAt(
      name: "InterestManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestManager>;
    getContractAt(
      name: "Isxr",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Isxr>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "IBeraCrocMultiSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeraCrocMultiSwap>;
    getContractAt(
      name: "IBGT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBGT>;
    getContractAt(
      name: "ICrocSwapDex",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrocSwapDex>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IHenloDexRouterV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHenloDexRouterV1>;
    getContractAt(
      name: "IStakingVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingVault>;
    getContractAt(
      name: "Malebi",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Malebi>;
    getContractAt(
      name: "Calc",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Calc>;
    getContractAt(
      name: "IPT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPT>;
    getContractAt(
      name: "IYT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYT>;
    getContractAt(
      name: "Pendle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pendle>;
    getContractAt(
      name: "PT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PT>;
    getContractAt(
      name: "YT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YT>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "Speech",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Speech>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SpeechLock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SpeechLock>;
    getContractAt(
      name: "Sxr",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Sxr>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "XoxManage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XoxManage>;
    getContractAt(
      name: "Xyyz",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Xyyz>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
