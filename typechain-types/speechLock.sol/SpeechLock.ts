/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SpeechLockInterface extends utils.Interface {
  functions: {
    "LP()": FunctionFragment;
    "LPlockTime()": FunctionFragment;
    "LPlockTimeDetermined()": FunctionFragment;
    "Speech()": FunctionFragment;
    "SpeechLockTime()": FunctionFragment;
    "SpeechLockTimeDetermined()": FunctionFragment;
    "lockLP()": FunctionFragment;
    "lockSpeech()": FunctionFragment;
    "owner()": FunctionFragment;
    "withdrawLP(address)": FunctionFragment;
    "withdrawSpeech(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LP"
      | "LPlockTime"
      | "LPlockTimeDetermined"
      | "Speech"
      | "SpeechLockTime"
      | "SpeechLockTimeDetermined"
      | "lockLP"
      | "lockSpeech"
      | "owner"
      | "withdrawLP"
      | "withdrawSpeech"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "LP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LPlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LPlockTimeDetermined",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Speech", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SpeechLockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SpeechLockTimeDetermined",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockLP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockSpeech",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawLP",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSpeech",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "LP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LPlockTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LPlockTimeDetermined",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Speech", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SpeechLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SpeechLockTimeDetermined",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockSpeech", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSpeech",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SpeechLock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpeechLockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LP(overrides?: CallOverrides): Promise<[string]>;

    LPlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    LPlockTimeDetermined(overrides?: CallOverrides): Promise<[boolean]>;

    Speech(overrides?: CallOverrides): Promise<[string]>;

    SpeechLockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    SpeechLockTimeDetermined(overrides?: CallOverrides): Promise<[boolean]>;

    lockLP(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockSpeech(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withdrawLP(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawSpeech(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LP(overrides?: CallOverrides): Promise<string>;

  LPlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  LPlockTimeDetermined(overrides?: CallOverrides): Promise<boolean>;

  Speech(overrides?: CallOverrides): Promise<string>;

  SpeechLockTime(overrides?: CallOverrides): Promise<BigNumber>;

  SpeechLockTimeDetermined(overrides?: CallOverrides): Promise<boolean>;

  lockLP(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockSpeech(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  withdrawLP(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawSpeech(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LP(overrides?: CallOverrides): Promise<string>;

    LPlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    LPlockTimeDetermined(overrides?: CallOverrides): Promise<boolean>;

    Speech(overrides?: CallOverrides): Promise<string>;

    SpeechLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    SpeechLockTimeDetermined(overrides?: CallOverrides): Promise<boolean>;

    lockLP(overrides?: CallOverrides): Promise<void>;

    lockSpeech(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    withdrawLP(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSpeech(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    LP(overrides?: CallOverrides): Promise<BigNumber>;

    LPlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    LPlockTimeDetermined(overrides?: CallOverrides): Promise<BigNumber>;

    Speech(overrides?: CallOverrides): Promise<BigNumber>;

    SpeechLockTime(overrides?: CallOverrides): Promise<BigNumber>;

    SpeechLockTimeDetermined(overrides?: CallOverrides): Promise<BigNumber>;

    lockLP(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockSpeech(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLP(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawSpeech(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LPlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LPlockTimeDetermined(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Speech(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SpeechLockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SpeechLockTimeDetermined(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockLP(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockSpeech(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawLP(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSpeech(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
