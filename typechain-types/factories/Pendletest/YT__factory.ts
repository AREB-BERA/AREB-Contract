/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { YT, YTInterface } from "../../Pendletest/YT";

const _abi = [
  {
    inputs: [],
    name: "YTsupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "b",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600260005534801561001557600080fd5b5060e0806100246000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80634df7e3d01460375780636d78a351146051575b600080fd5b603d606b565b604051604891906091565b60405180910390f35b60576071565b604051606291906091565b60405180910390f35b60005481565b60008054905090565b6000819050919050565b608b81607a565b82525050565b600060208201905060a460008301846084565b9291505056fea264697066735822122063cdc3122f82b4295cd80c2140b9331b6da9b57e8b21b7266a128d1f75f350c664736f6c63430008110033";

type YTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YT__factory extends ContractFactory {
  constructor(...args: YTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<YT> {
    return super.deploy(overrides || {}) as Promise<YT>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): YT {
    return super.attach(address) as YT;
  }
  override connect(signer: Signer): YT__factory {
    return super.connect(signer) as YT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YTInterface {
    return new utils.Interface(_abi) as YTInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): YT {
    return new Contract(address, _abi, signerOrProvider) as YT;
  }
}
