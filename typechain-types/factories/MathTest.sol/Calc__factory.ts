/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Calc, CalcInterface } from "../../MathTest.sol/Calc";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "getExp",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506107ec806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ae088f2214610030575b600080fd5b61004a600480360381019061004591906106b3565b610060565b60405161005791906106ef565b60405180910390f35b600061006b82610072565b9050919050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc000082121580156100ad575068070c1cc73b00c800008213155b6100ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e390610767565b60405180910390fd5b60008212156101225761010182600003610072565b670de0b6b3a764000080028161011a57610119610787565b5b059050610673565b60006806f05b59d3b20000008312610162576806f05b59d3b200000083039250770195e54c5dd42177f53a27172fa9ec630262827000000000905061019a565b6803782dace9d90000008312610194576803782dace9d9000000830392506b1425982cf597cd205cef73809050610199565b600190505b5b606483029250600068056bc75e2d63100000905068ad78ebc5ac6200000084126101fa5768ad78ebc5ac620000008403935068056bc75e2d631000006e01855144814a7ff805980ff00840008202816101f6576101f5610787565b5b0590505b6856bc75e2d6310000008412610243576856bc75e2d6310000008403935068056bc75e2d631000006b02df0ab5a80a22c61ab5a70082028161023f5761023e610787565b5b0590505b682b5e3af16b18800000841261028a57682b5e3af16b188000008403935068056bc75e2d63100000693f1fce3da636ea5cf85082028161028657610285610787565b5b0590505b6815af1d78b58c40000084126102d1576815af1d78b58c4000008403935068056bc75e2d63100000690127fa27722cc06cc5e28202816102cd576102cc610787565b5b0590505b680ad78ebc5ac6200000841261031757680ad78ebc5ac62000008403935068056bc75e2d6310000068280e60114edb805d0382028161031357610312610787565b5b0590505b68056bc75e2d63100000841261035d5768056bc75e2d631000008403935068056bc75e2d63100000680ebc5fb4174612111082028161035957610358610787565b5b0590505b6802b5e3af16b188000084126103a3576802b5e3af16b18800008403935068056bc75e2d631000006808f00f760a4b2db55d82028161039f5761039e610787565b5b0590505b68015af1d78b58c4000084126103e95768015af1d78b58c400008403935068056bc75e2d631000006806f5f17757889379378202816103e5576103e4610787565b5b0590505b600068056bc75e2d63100000905060008590508082019150600268056bc75e2d631000008783028161041e5761041d610787565b5b058161042d5761042c610787565b5b0590508082019150600368056bc75e2d631000008783028161045257610451610787565b5b058161046157610460610787565b5b0590508082019150600468056bc75e2d631000008783028161048657610485610787565b5b058161049557610494610787565b5b0590508082019150600568056bc75e2d63100000878302816104ba576104b9610787565b5b05816104c9576104c8610787565b5b0590508082019150600668056bc75e2d63100000878302816104ee576104ed610787565b5b05816104fd576104fc610787565b5b0590508082019150600768056bc75e2d631000008783028161052257610521610787565b5b058161053157610530610787565b5b0590508082019150600868056bc75e2d631000008783028161055657610555610787565b5b058161056557610564610787565b5b0590508082019150600968056bc75e2d631000008783028161058a57610589610787565b5b058161059957610598610787565b5b0590508082019150600a68056bc75e2d63100000878302816105be576105bd610787565b5b05816105cd576105cc610787565b5b0590508082019150600b68056bc75e2d63100000878302816105f2576105f1610787565b5b058161060157610600610787565b5b0590508082019150600c68056bc75e2d631000008783028161062657610625610787565b5b058161063557610634610787565b5b059050808201915060648468056bc75e2d631000008486028161065b5761065a610787565b5b05028161066b5761066a610787565b5b059450505050505b919050565b600080fd5b6000819050919050565b6106908161067d565b811461069b57600080fd5b50565b6000813590506106ad81610687565b92915050565b6000602082840312156106c9576106c8610678565b5b60006106d78482850161069e565b91505092915050565b6106e98161067d565b82525050565b600060208201905061070460008301846106e0565b92915050565b600082825260208201905092915050565b7f496e76616c6964206578706f6e656e7400000000000000000000000000000000600082015250565b600061075160108361070a565b915061075c8261071b565b602082019050919050565b6000602082019050818103600083015261078081610744565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea264697066735822122097d7a51114a1e1631a9f63e8ff37e32a828bd8ffb6e13fc0d0c95a7d018d105364736f6c63430008110033";

type CalcConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CalcConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Calc__factory extends ContractFactory {
  constructor(...args: CalcConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Calc> {
    return super.deploy(overrides || {}) as Promise<Calc>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Calc {
    return super.attach(address) as Calc;
  }
  override connect(signer: Signer): Calc__factory {
    return super.connect(signer) as Calc__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CalcInterface {
    return new utils.Interface(_abi) as CalcInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Calc {
    return new Contract(address, _abi, signerOrProvider) as Calc;
  }
}
